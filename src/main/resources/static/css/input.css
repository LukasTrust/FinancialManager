label {
    color: var(--text-color);
    font-size: var(--font-size-sm);
    pointer-events: none;
    cursor: default;
}

.inputBox {
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    margin-bottom: var(--margin-md);
}

.inputBox span {
    position: absolute;
    right: 20px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--accent-color);
    font-size: 1.1rem;
    z-index: 2;
}

.inputBox input {
    width: 100%;
    padding: var(--padding-md) var(--padding-lg) var(--padding-md) var(--padding-lg);
    background: rgba(30, 41, 59, 0.7);
    border: 1px solid var(--table-border-color);
    border-radius: var(--border-radius-md);
    color: var(--text-color);
    font-size: var(--font-size-sm);
    transition: var(--transition-fast);
    position: relative;
    z-index: 1;
}

input:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.2);
    background: rgba(30, 41, 59, 0.9);
}

.inputBox input:hover {
    border-color: var(--primary-color-light);
}

.inputBox::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: var(--border-radius-md);
    background: var(--secondary-gradient);
    opacity: 0.1;
    z-index: 0;
    pointer-events: none;
}

.inputBox:focus-within::after {
    opacity: 0.15;
}

@supports (-webkit-appearance: none) or (-moz-appearance: none) {
    .checkboxWrapper input[type=checkbox] {
        --active: var(--accent-color);
        --active-inner: var(--text-color);
        --focus: 2px rgba(79, 70, 229, 0.3);
        --border: var(--search-border);
        --border-hover: var(--accent-color);
        --background: var(--search-bg);
        --disabled: var(--pagination-disabled);
        --disabled-inner: var(--table-row-hidden);
        -webkit-appearance: none;
        -moz-appearance: none;
        height: var(--checkbox-size);
        outline: none;
        display: inline-block;
        vertical-align: top;
        padding: 0;
        position: relative;
        margin: 0;
        cursor: pointer;
        border: 1px solid var(--bc, var(--border));
        background: var(--b, var(--background));
        transition: background var(--transition-normal), border-color var(--transition-normal), box-shadow var(--transition-fast);
    }
    .checkboxWrapper input[type=checkbox]:after {
        content: "";
        display: block;
        left: 0;
        top: 0;
        position: absolute;
        transition: transform var(--d-t, var(--transition-normal)) var(--d-t-e, ease), opacity var(--d-o, var(--transition-fast));
    }
    .checkboxWrapper input[type=checkbox]:checked {
        --b: var(--active);
        --bc: var(--active);
        --d-o: .3s;
        --d-t: .6s;
        --d-t-e: cubic-bezier(.2, .85, .32, 1.2);
    }
    .checkboxWrapper input[type=checkbox]:disabled {
        --b: var(--disabled);
        cursor: not-allowed;
        opacity: 0.9;
    }
    .checkboxWrapper input[type=checkbox]:disabled:checked {
        --b: var(--disabled-inner);
        --bc: var(--border);
    }
    .checkboxWrapper input[type=checkbox]:disabled + label {
        cursor: not-allowed;
    }
    .checkboxWrapper input[type=checkbox]:hover:not(:checked):not(:disabled) {
        --bc: var(--border-hover);
    }
    .checkboxWrapper input[type=checkbox]:focus {
        box-shadow: 0 0 0 var(--focus);
    }
    .checkboxWrapper input[type=checkbox]:not(.switch) {
        width: var(--checkbox-size);
    }
    .checkboxWrapper input[type=checkbox]:not(.switch):after {
        opacity: var(--o, 0);
    }
    .checkboxWrapper input[type=checkbox]:not(.switch):checked {
        --o: 1;
    }
    .checkboxWrapper input[type=checkbox] + label {
        display: inline-block;
        vertical-align: middle;
        cursor: pointer;
        margin-left: var(--spacing-xs);
        color: var(--text-color);
    }
    .checkboxWrapper input[type=checkbox]:not(.switch) {
        border-radius: var(--border-radius-sm);
    }
    .checkboxWrapper input[type=checkbox]:not(.switch):after {
        width: 5px;
        height: 9px;
        border: 2px solid var(--active-inner);
        border-top: 0;
        border-left: 0;
        left: 7px;
        top: 4px;
        transform: rotate(var(--r, 20deg));
    }
    .checkboxWrapper input[type=checkbox]:not(.switch):checked {
        --r: 43deg;
    }
    .checkboxWrapper input[type=checkbox].switch {
        width: 38px;
        border-radius: var(--border-radius-xl);
    }
    .checkboxWrapper input[type=checkbox].switch:after {
        left: 2px;
        top: 2px;
        border-radius: var(--border-radius-circle);
        width: 17px;
        height: 17px;
        background: var(--ab, var(--border));
        transform: translateX(var(--x, 0));
    }
    .checkboxWrapper input[type=checkbox].switch:checked {
        --ab: var(--active-inner);
        --x: 17px;
    }
    .checkboxWrapper input[type=checkbox].switch:disabled:not(:checked):after {
        opacity: 0.6;
    }
}

.checkboxWrapper * {
    box-sizing: inherit;
}
.checkboxWrapper *:before,
.checkboxWrapper *:after {
    box-sizing: inherit;
}

.fileUploadBox {
    padding: var(--padding-md) var(--padding-xl);
    border-radius: var(--border-radius-lg);
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid var(--search-border);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    color: var(--text-color);
    font-size: var(--font-size-xs);
    text-shadow: var(--box-shadow-sm);
    cursor: pointer;
    transition: all var(--transition-normal);
    align-content: center;
}

.fileUploadBox:hover {
    border-color: var(--link-color);
    background: rgba(255, 255, 255, 0.2);
}

.fileBrowseButton {
    color: var(--link-color);
    font-weight: var(--font-weight-bold);
}

.inputDate {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
}

.inputDate label {
    font-weight: var(--font-weight-bold);
    font-size: var(--font-size-md);
}

.inputDate input[type="date"] {
    border: 1px solid var(--search-border);
    border-radius: var(--border-radius-md);
    font-size: var(--font-size-xs);
    cursor: pointer;
    transition: border-color var(--transition-normal);
    padding: var(--padding-sm);
    background: var(--search-bg);
    color: var(--text-color);
}

.inputDate input[type="date"]:focus {
    border-color: var(--accent-color);
    outline: none;
    box-shadow: 0 0 0 2px var(--search-shadow);
}